package {package};

import java.util.*;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import commons.model.annotations.validate.EntityValid;
import commons.model.web.response.Response;
import commons.model.web.request.PageRequestParam;
import commons.model.web.response.query.GeneralQueryResult;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
{cloneImports}
/**
 * {description}
 * author: {author}
 * {date}
 */
@Slf4j
@Api(tags = "description")
@Controller
@ResponseBody
@RequestMapping("/{entity}")
public class {Controller}{

    @Autowired
    private {Service} {service};

    @ApiOperation(value="保存",notes = "保存{entityDescription}")
    @RequestMapping(value = "/save",method = RequestMethod.POST)
    public Response save(@ApiParam(value = "请求参数",required = true) @EntityValid @RequestBody {Entity} {entity}){
        log.debug("进入-保存{entityDescription}服务：{}",{entity});
        {service}.save({entity});
        {PrimaryKeyField} {primaryKeyField} = {entity}.{getPrimaryKeyField};
        log.debug("退出-{entityDescription}服务：{}",{primaryKeyField});
        return Response.success({primaryKeyField});
    }

    @ApiOperation(value="批量保存",notes = "批量保存{entityDescription}")
    @RequestMapping(value = "/saveBatch",method = RequestMethod.POST)
    public Response saveBatch(@ApiParam(value = "请求参数",required = true) @EntityValid @RequestBody List<{Entity}> {entity}s){
        log.debug("进入-批量保存{entityDescription}服务：{}",{entity});
        {service}.saveBatch({entity}s);
        log.debug("退出-批量保存{entityDescription}服务：{}",{entity}s.size());
        return Response.success({entity}s.size());
    }

    @ApiOperation(value="查询",notes = "查询{entityDescription}列表")
    @RequestMapping(value = "/find",method = RequestMethod.POST)
    public Response find(@ApiParam(value = "请求参数",required = true) @RequestBody PageRequestParam<{Entity}> param){
        log.debug("进入-查询{entityDescription}列表服务：{}",param);
        LambdaQueryWrapper<{Entity}> queryWrapper = new LambdaQueryWrapper<>(param.getBody());
        IPage<User> page = new Page<>(param.getPage(),param.getPageSize());
        {service}.page(page,queryWrapper);
        GeneralQueryResult generalQueryResult = new GeneralQueryResult(page.getRecords(),page.getTotal());
        log.debug("退出-查询{entityDescription}服务：{}",page.getTotal());
        return Response.success(generalQueryResult);
    }

    @ApiOperation(value="详情",notes = "查看{entityDescription}详情")
    @RequestMapping(value = "/detail/{{primaryKeyField}}",method = RequestMethod.GET)
    public Response detail(@ApiParam(value = "{entityDescription}Id",required = true) @PathVariable {PrimaryKeyField} {primaryKeyField}){
        log.debug("进入-查询{entityDescription}详情服务：{}",{primaryKeyField);
        {Entity} {entity} = {service}.getById({primaryKeyField});
        log.debug("退出-查询{entityDescription}详情服务：{}",{entity});
        return Response.success({entity});
    }

    @ApiOperation(value="删除",notes = "删除{entityDescription}")
    @RequestMapping(value = "/remove/{{primaryKeyField}}",method = RequestMethod.DELETE)
    public Response deleteById(@ApiParam(value = "{entityDescription}Id",required = true) @PathVariable {PrimaryKeyField} {primaryKeyField}){
        log.debug("进入-删除{entityDescription}服务：{}",{primaryKeyField});
        boolean result = {service}.removeById({primaryKeyField});
        log.debug("退出-删除{entityDescription}服务：{}",result);
        return Response.success({result});
    }
}